import random
import string

def generate_password(length, include_numbers, include_symbols, include_uppercase):
    """
    Generates a secure password based on specified parameters.

    Parameters:
    - length (int): Length of the password (8–32 characters).
    - include_numbers (bool): Whether to include digits (0–9).
    - include_symbols (bool): Whether to include punctuation/symbols.
    - include_uppercase (bool): Whether to include uppercase letters (A–Z).

    Returns:
    - str: A randomly generated password.
    """
    if length < 8 or length > 32:
        raise ValueError("Password length must be between 8 and 32 characters.")

    # Start with lowercase letters as base
    characters = string.ascii_lowercase

    # Expand character pool based on user preference
    if include_uppercase:
        characters += string.ascii_uppercase
    if include_numbers:
        characters += string.digits
    if include_symbols:
        characters += string.punctuation

    password = []

    # Ensure password includes at least one character from each selected category
    if include_uppercase:
        password.append(random.choice(string.ascii_uppercase))
    if include_numbers:
        password.append(random.choice(string.digits))
    if include_symbols:
        password.append(random.choice(string.punctuation))

    # Fill remaining length with random characters from the selected pool
    while len(password) < length:
        password.append(random.choice(characters))

    # Shuffle to randomize character positions
    random.shuffle(password)

    return ''.join(password)

def main():
    """
    Entry point for user interaction. Prompts for input and displays the generated password.
    """
    print("Welcome to the Password Generator!")

    try:
        length = int(input("Enter desired password length (8–32): "))
        include_numbers = input("Include numbers? (y/n): ").strip().lower() == 'y'
        include_symbols = input("Include symbols? (y/n): ").strip().lower() == 'y'
        include_uppercase = input("Include uppercase letters? (y/n): ").strip().lower() == 'y'

        password = generate_password(length, include_numbers, include_symbols, include_uppercase)
        print(f"\nGenerated Password: {password}")

    except ValueError as e:
        print(f"\nError: {e}")

if __name__ == "__main__":
    main()
