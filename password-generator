import secrets
import string

def generate_password(length, use_uppercase, use_lowercase, use_digits, use_symbols):
    """
    Generates a secure password based on specified parameters.

    Parameters:
    - length (int): Length of the password (8–32 characters).
    - use_uppercase (bool): Include uppercase letters (A–Z).
    - use_lowercase (bool): Include lowercase letters (a–z).
    - use_digits (bool): Include digits (0–9).
    - use_symbols (bool): Include symbols/punctuation.

    Returns:
    - str: A randomly generated password.
    """
    if length < 8 or length > 32:
        raise ValueError("Password length must be between 8 and 32 characters.")

    # Define the character pools explicitly
    pools = []
    if use_uppercase:
        pools.append(string.ascii_uppercase)
    if use_lowercase:
        pools.append(string.ascii_lowercase)
    if use_digits:
        pools.append(string.digits)
    if use_symbols:
        pools.append(string.punctuation)

    if not pools:
        raise ValueError("At least one character type must be selected.")

    all_characters = ''.join(pools)

    password_chars = []

    # Ensure at least one character from each selected pool is included
    for pool in pools:
        password_chars.append(secrets.choice(pool))

    # Fill the rest of the password length with random characters from the combined pools
    while len(password_chars) < length:
        password_chars.append(secrets.choice(all_characters))

    # Shuffle to randomize order
    secrets.SystemRandom().shuffle(password_chars)

    return ''.join(password_chars)


def run_sample_tests(sample_count=5, length=16, use_uppercase=True, use_lowercase=True, use_digits=True, use_symbols=True):
    """
    Generate multiple sample passwords to demonstrate randomness.
    """
    print("\nSample generated passwords for testing randomness:\n")
    for i in range(sample_count):
        pwd = generate_password(length, use_uppercase, use_lowercase, use_digits, use_symbols)
        print(f"{i+1}: {pwd}")
    print("\n" + "-"*50 + "\n")


def main():
    """
    Entry point for user interaction. Prompts for input and displays the generated password.
    """
    print("\nWelcome to the Password Generator!\n")
    print("Please select which character types to include in your password:\n")

    try:
        length = int(input("Enter desired password length (8–32): ").strip())
        use_uppercase = input("Include uppercase letters? (y/n): ").strip().lower() == 'y'
        use_lowercase = input("Include lowercase letters? (y/n): ").strip().lower() == 'y'
        use_digits = input("Include digits? (y/n): ").strip().lower() == 'y'
        use_symbols = input("Include symbols? (y/n): ").strip().lower() == 'y'

        if not any([use_uppercase, use_lowercase, use_digits, use_symbols]):
            print("\nError: You must select at least one character type!\n")
            return

        # Ask if user wants to see sample random passwords test output
        run_tests = input("Generate sample passwords to test randomness? (y/n): ").strip().lower() == 'y'
        if run_tests:
            sample_count = 5
            sample_length = length
            run_sample_tests(sample_count, sample_length, use_uppercase, use_lowercase, use_digits, use_symbols)

        password = generate_password(length, use_uppercase, use_lowercase, use_digits, use_symbols)
        print(f"\nGenerated Password:\n{password}\n")

    except ValueError as e:
        print(f"\nError: {e}\n")


if __name__ == "__main__":
    main()

